<?php

namespace Tests\Ploi\Resources;

use Ploi\Exceptions\Http\NotFound;
use Ploi\Exceptions\Resource\Server\Site\DomainAlreadyExists;
use Ploi\Http\Response;
use Ploi\Resources\Server\Server;
use Ploi\Resources\Server\Site;
use stdClass;
use Tests\BaseTest;

/**
 * Class SiteTest
 *
 * @package Tests\Ploi\Resources
 */
class SiteTest extends BaseTest
{
    /**
     * @var Server
     */
    private $server;

    public function setup()
    {
        parent::setup(); // TODO: Change the autogenerated stub

        $resource = $this->getPloi()->server();
        $allServers = $resource->get();
        if (!empty($allServers->getJson()->data)) {
            $this->server = $resource->setId($allServers->getJson()->data[0]->id);
        }
    }

    public function testGetAllSites()
    {
        $resource = $this->server->site();

        $sites = $resource->get();

        $this->assertInstanceOf(Response::class, $sites);
        $this->assertInternalType('array', $sites->getJson()->data);
    }

    /**
     * @throws \Ploi\Exceptions\Http\InternalServerError
     * @throws \Ploi\Exceptions\Http\NotFound
     * @throws \Ploi\Exceptions\Http\NotValid
     * @throws \Ploi\Exceptions\Http\PerformingMaintenance
     * @throws \Ploi\Exceptions\Http\TooManyAttempts
     */
    public function testGetSingleSite()
    {
        $resource = $this->server->site();
        $sites = $resource->get();

        if (!empty($sites->getJson()->data[0])) {
            $siteId = $sites->getJson()->data[0]->id;

            $resource->setId($siteId);
            $methodOne = $resource->get();
            $methodTwo = $this->server->site($siteId)->get();
            $methodThree = $this->server->site()->get($siteId);

            $this->assertInstanceOf(stdClass::class, $methodOne->getJson()->data);
            $this->assertEquals($siteId, $methodOne->getJson()->data->id);
            $this->assertEquals($siteId, $methodTwo->getJson()->data->id);
            $this->assertEquals($siteId, $methodThree->getJson()->data->id);
        }
    }

    public function testCreateExampleDotCom()
    {
        try {
            $response = $this->server->site()->create('example.com');

            $this->assertInstanceOf(stdClass::class, $response);
            $this->assertNotEmpty($response->id);

            return $response;
        } catch (\Exception $e) {
            $this->assertInstanceOf(DomainAlreadyExists::class, $e);

            $allSites = $this->server->site()->get();
            $foundSite = false;
            foreach ($allSites->getJson()->data as $site) {
                if ($foundSite) {
                    break;
                }

                if ($site->domain === 'example.com') {
                    $this->server->site($site->id)->delete();

                    return $this->testCreateExampleDotCom();
                }
            }
        }
    }

    /**
     * @depends testCreateExampleDotCom
     */
    public function testCreateDuplicateSite($site)
    {
        try {
            $this->server->site()->create('example.com');

            $this->assertTrue(true);

            return $this->testCreateDuplicateSite(false);
        } catch (\Exception $e) {
            $this->assertInstanceOf(DomainAlreadyExists::class, $e);

            $allSites = $this->server->site()->get();
            $foundSite = false;
            foreach ($allSites->getJson()->data as $site) {
                if ($foundSite) {
                    break;
                }

                if ($site->domain === 'example.com') {
                    $foundSite = $site;
                }
            }

            return $foundSite;
        }
    }

    /**
     * @depends testCreateExampleDotCom
     * @param $site
     * @return Site
     * @throws NotFound
     * @throws \Ploi\Exceptions\Http\InternalServerError
     * @throws \Ploi\Exceptions\Http\NotValid
     * @throws \Ploi\Exceptions\Http\PerformingMaintenance
     * @throws \Ploi\Exceptions\Http\TooManyAttempts
     */
    public function testGetDeployScript($site)
    {
        echo json_encode($site);

        $script = $this
            ->server
            ->site($site->id)
            ->getDeployScript();

        $this->assertInternalType('string', $script);

        return $site;
    }

    /**
     * @depends testGetDeployScript
     * @param $site
     * @return Site
     * @throws NotFound
     * @throws \Ploi\Exceptions\Http\InternalServerError
     * @throws \Ploi\Exceptions\Http\NotValid
     * @throws \Ploi\Exceptions\Http\PerformingMaintenance
     * @throws \Ploi\Exceptions\Http\TooManyAttempts
     */
    public function testUpdateDeployScript($site)
    {
        $script = "curl google.com";
        $updated = $this->server
            ->site($site->id)
            ->updateDeployScript($script);

        $this->assertTrue($updated);
        $this->assertEquals($script, $this->server->site($site->id)->getDeployScript());

        return $site;
    }

    /**
     * @depends testUpdateDeployScript
     * @param $site
     * @return Site
     * @throws NotFound
     * @throws \Ploi\Exceptions\Http\InternalServerError
     * @throws \Ploi\Exceptions\Http\NotValid
     * @throws \Ploi\Exceptions\Http\PerformingMaintenance
     * @throws \Ploi\Exceptions\Http\TooManyAttempts
     */
    public function testDeploySite($site)
    {
        $this->assertTrue($this->server->site($site->id)->deploy());

        return $site;
    }

    /**
     * @depends testDeploySite
     */
    public function testDeleteSite($site)
    {
        if (!empty($site)) {
            $deleted = $this->server->site($site->id)->delete();
            $this->assertTrue($deleted);
        }
    }

    public function testDeleteInvalidSite()
    {
        $deleted = $this->server->site(0)->delete();
        $this->assertFalse($deleted);

        try {
            $this->server->site()->delete(1);
        } catch(\Exception $e) {
            $this->assertInstanceOf(NotFound::class, $e);
        }
    }
}
